#include <PPsat/help_print.hpp>

#include <iostream>

void PPsat::help_print(std::ostream& out)
{
    out << "Description:\n"
        << "\tA SAT solver.\n"
        << "\n"
        << "Usage:\n"
        << "\tPPsat [<OPTION>]... [<PATH:input> [<PATH:output>]]\n"
        << "\n"
        << "Arguments:\n"
        << "\tMissing file path argument means the program will use standard "
           "I/O.\n"
        << "\n"
        << "Options:\n"
        << "\t-help [<BOOL>]\t\t\t\t\tDisplays this help.\n"
        << "\t-subprogram [convert|solve]\t\t\tSubprogram selection.\n"
        << "\t-nnf [<BOOL>]\t\t\t\t\tThe input is in NNF.\n"
        << "\t-format [dimacs|smtlib]\t\t\t\tUse the specified format for the "
           "input.\n"
        << "\t-clause [basic|counting|watched_literals]\tThe type of data "
           "structure for unit propagation.\n"
        << "\t-adjacency [list|set|set_unordered]\t\tThe type of data "
           "structure for literal adjacency.\n"
        << "\t-decision [trivial|random|JW_static|VSIDS]\tThe type of "
           "decision heuristic.\n"
        << "\t-restart <DOUBLE>\t\t\t\tThe factor for the geometric restarts. "
           "Should "
           "be greater than 1.\n"
        << "\t-cdcl [<BOOL>]\t\t\t\t\tUse the CDCL version of the solver (as "
           "opposed "
           "to DPLL).\n"
        << "\t-assume [<BOOL>]\t\t\t\tAccept an assumption.\n"
        << "\n"
        << "Subprograms:\n"
        << "\tconvert\tConverts SMT-LIB into DIMACS using the tseiting "
           "encoding.\n"
        << "\tsolve\tThe solver.\n"
        << "\n"
        << "Clause structures:\n"
        << "\tbasic\t\t\tCalculates unit-ness by iterating the literals.\n"
        << "\tcounting\t\tCounts the number of true, false and unassigned "
           "literals.\n"
        << "\twatched_literals\tLazy structure without a need to reset during "
           "backtrack.\n"
        << "\n"
        << "Adjacency structures:\n"
        << "\tlist\t\tstd::list\n"
        << "\tset\t\tstd::set\n"
        << "\tset_unordered\tstd::unordered_set\n"
        << "\n"
        << "Decision heuristics:\n"
        << "\ttrivial\t\tPicks the variables in an arbitrary order.\n"
        << "\trandom\t\tChooses the variable at random at each invocation.\n"
        << "\tJW_static\tThe static version of Jeroslow-Wang heuristic.\n"
        << "\tVSIDS\t\tVariable State Independent Decaying Sum.\n"
        << "\n"
        << "Assumptions:\n"
        << "\tThe assumption is passed through stdin.\n"
        << "\tIts format is the same as a clause in DIMACS but starts with "
           "'a' e.g. `a 1 -2 3 0`.\n"
        << "\tIf both the formula and the assumption are passed through "
           "stdin, the assumption shall come second.\n"
        << "\n"
        << "Examples:\n"
        << "\tPPsat -subprogram convert < inputs/test.sat\n"
        << "\tPPsat -cdcl < inputs/uf125-010.cnf\n";
}
